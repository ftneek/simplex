#cas

test_simplex():=
BEGIN
RETURN {test01(),test02(),test03(),test04(),test05(),test06(),test07(),test08(),test09(),test10(),test11(),test12(),test13(),test14(),test15(),test16(),test17()};
END;

//test00():= simplex.hpprgm compiled successfully

// Example 3.7.2
//       x1 +2x3      + x4 = 20
//      2x1 + x2 + x3      = 10
//      -x1 +4x2 -2x3 +3x4 = 40
// min   x1 +4x2 +3x3 +2x4 = z
//       x1,  x2,  x3,  x4 ≥ 0
test01():=
BEGIN
LOCAL expected,result;
expected:=[35,[[1,1/2,1/2,0,3/4,0,-1/4,5],[0,0,0,0,-3/2,1,1/2,0],[0,3/2,-1/2,1,1/4,0,1/4,15],[0,1/2,7/2,0,-5/4,0,-1/4,-35]],[1,6,4],3,[[5],[0],[0],[15],[0],[0],[0]]];
result:=simplex([[1,2,0,1,20],[2,1,1,0,10],[-1,4,-2,3,40],[1,4,3,2,0]],-3);
RETURN sum(abs(expected - result)) == 0;
END;

// -slack variables, artificial variables
//      2x +4y ≥ 22
//      3x +2y ≥ 20
//      4x +5y ≥ 40
// min  6x +5y = z
//       x,  y ≥ 0
test02():=
BEGIN
LOCAL expected,result;
expected:=[320/7,[[0,1,0,4/7,-3/7,0,-4/7,3/7,40/7],[1,0,0,-5/7,2/7,0,5/7,-2/7,20/7],[0,0,1,6/7,-8/7,-1,-6/7,8/7,46/7],[0,0,0,10/7,3/7,0,-10/7,-3/7,-320/7]],[2,1,3],3,[[20/7],[40/7],[46/7],[0],[0],[0],[0],[0]]];
result:=simplex([[2,4,22],[3,2,20],[4,5,40],[6,5,0]],[lpmin,3]);
RETURN sum(abs(expected - result)) == 0;
END;

// slack varaibles
//     -2x -4y ≤-22
//     -3x -2y ≤-20
//     -4x -5y ≤-40
// min  6x +5y = z
//       x,  y ≥ 0
test03():=
BEGIN
LOCAL expected,result;
expected:=[320/7,[[0,0,1,6/7,-8/7,46/7],[1,0,0,-5/7,2/7,20/7],[0,1,0,4/7,-3/7,40/7],[0,0,0,10/7,3/7,-320/7]],[3,1,2],2,[[20/7],[40/7],[46/7],[0],[0]]];
result:=simplex([[-2,-4,-22],[-3,-2,-20],[-4,-5,-40],[6,5,0]]);
RETURN sum(abs(expected - result)) == 0;
END;

//      3x +2y + z = 10
//      2x +5y +3z = 15
// min -2x -3y -4z = Z
//       x,  y,  z ≥ 0
test04():=
BEGIN
LOCAL expected,result;
expected:=[-130/7,[[1,1/7,0,3/7,-1/7,15/7],[0,11/7,1,-2/7,3/7,25/7],[0,25/7,0,-2/7,10/7,130/7]],[1,3],3,[[15/7],[0],[25/7],[0],[0]]];
result:=simplex([[3,2,1,10],[2,5,3,15],[-2,-3,-4,0]],-2);
RETURN sum(abs(expected - result)) == 0;
END;

// artificial variables, non zero offset
//      4x1 - x2       +x4 - x5 + x6          = 6
//     -7x1 +8x2 + x3                - x7     = 7
//       x1 + x2      +4x4 -4x5               = 12
// min -3x1 +2x2 + x3 - x4 + x5           +87 = z
//       x1,  x2,  x3,  x4,  x5,  x6,  x7 ≥ 0
test05():=
BEGIN
LOCAL expected,result;
expected:=[1441/17,[[1,0,1/17,0,0,32/85,-1/17,32/85,1/17,-8/85,131/85],[0,1,3/17,0,0,28/85,-3/17,28/85,3/17,-7/85,189/85],[0,0,-1/17,1,-1,-3/17,1/17,-3/17,-1/17,5/17,35/17],[0,0,13/17,0,0,5/17,4/17,5/17,-4/17,3/17,-1441/17]],[1,2,4],3,[[131/85],[189/85],[0],[35/17],[0],[0],[0],[0],[0],[0]]];
result:=simplex([[4,-1,0,1,-1,1,0,6],[-7,8,1,0,0,0,-1,7],[1,1,0,4,-4,0,0,12],[-3,2,1,-1,1,0,0,-87]],-3);
RETURN sum(abs(expected - result)) == 0;
END;

// slack variables 'dual problem'
//      2z1 + 3z2 + 4z3 ≤ 6
//      4z1 + 2z2 + 5z3 ≤ 5
// max 22z1 +20z2 +40z3 = c
//       z1,z2,z3 ≥ 0
test06():=
BEGIN
LOCAL expected,result;
expected:=[320/7,[[-6/7,1,0,5/7,-4/7,10/7],[8/7,0,1,-2/7,3/7,3/7],[46/7,0,0,20/7,40/7,320/7]],[2,3],2,[[0],[10/7],[3/7],[0],[0]]];
result:=simplex([[2,3,4,6],[4,2,5,5],[22,20,40,0]],lpmax);
RETURN sum(abs(expected - result)) == 0;
END;

// lpsolve(2x+5y,[3x-y=1,x-y≤5],assume=nonnegint)
test07():=
BEGIN
LOCAL expected,result;
expected:=[12,[[1,0,0,-1,1,1],[0,0,1,-2,1,6],[0,1,0,-3,2,2],[0,0,0,17,-12,-12]],[1,3,2],2,[[1],[2],[6],[0],[0]]];
result:=simplex([[3,-1,1],[1,-1,5],[2,5,0]],-1,[1,2]);
RETURN sum(abs(expected - result)) == 0;
END;

// lpsolve(x+3y+3z,[x+3y+2z≤7,2x+2y+z≤11], assume=lp_nonnegative,lp_maximize, lp_integervariables=[x,z])
test08():=
BEGIN
LOCAL expected,result;
expected:=[-10,[[0,1,1,0,0,1,3],[0,-1,0,-2,1,3,6],[1,1,0,1,0,-2,1],[0,1,0,1,0,1,10]],[3,5,1],3,[[1],[0],[3],[0],[6],[0]]];
result:=simplex([[1,3,2,7],[2,2,1,11],[-1,-3,-3,0]],lpmin,[1,3]);
RETURN sum(abs(expected - result)) == 0;
END;

// lpsolve(-5x-7y,[7x+y≤35,-x+3y≤6],assume=integer)
test09():=
BEGIN
LOCAL expected,result;
expected:=[-41,[[1,0,0,0,0,0,0,0,0,0,-5/12,1/4,4],[0,1,0,0,0,0,0,0,0,0,1/3,0,3],[0,0,0,0,0,0,1,0,0,0,-1/6,-1/2,1],[0,0,0,0,1,0,0,0,0,0,-1,0,1],[0,0,0,0,0,1,0,0,0,0,-7/12,-1/4,1],[0,0,1,0,0,0,0,0,0,0,31/12,-7/4,4],[0,0,0,0,0,0,0,1,0,0,9/4,-7/4,3],[0,0,0,0,0,0,0,0,1,0,2/3,-1,1],[0,0,0,1,0,0,0,0,0,0,-17/12,1/4,1],[0,0,0,0,0,0,0,0,0,1,5/12,-5/4,1],[0,0,0,0,0,0,0,0,0,0,1/4,5/4,41]],[1,2,7,5,6,3,8,9,4,10],11,[[4],[3],[4],[1],[1],[1],[1],[3],[1],[1],[0],[0]]];
result:=simplex([[7,1,35],[-1,3,6],[-5,-7,0]],lpmin,[1,2]);
RETURN sum(abs(expected - result)) == 0;
END;

//      x1+x2≤6
// max 3x1+2x2=z
//      x1,x2≥0 and integer
test10():=
BEGIN
LOCAL expected,result;
expected:=[18,[[1,1,1,6],[0,1,3,18]],[1],1,[[6],[0],[0]]];
result:=simplex([[1,1,6],[3,2,0]],lpmax,[1,2]);
RETURN sum(abs(expected - result)) == 0;
END;

//     2x1+ 9x2 ≤ 6
//    11x1- 8x2 ≤ 82
// max 3x1+13x2 = z
//       x1, x2 ≥0 and integer
test11():=
BEGIN
LOCAL expected,result;
expected:=[58,[[0,1,1,0,0,0,0,0,0,0,0,-1,4],[1,0,-4,0,0,0,0,0,0,0,0,9/2,2],[0,0,52,1,0,0,0,0,0,0,0,-115/2,92],[0,0,51,0,1,0,0,0,0,0,0,-113/2,90],[0,0,50,0,0,1,0,0,0,0,0,-111/2,88],[0,0,48,0,0,0,1,0,0,0,0,-107/2,84],[0,0,46,0,0,0,0,1,0,0,0,-103/2,80],[0,0,4,0,0,0,0,0,1,0,0,-9/2,6],[0,0,3,0,0,0,0,0,0,1,0,-7/2,4],[0,0,2,0,0,0,0,0,0,0,1,-5/2,2],[0,0,1,0,0,0,0,0,0,0,0,1/2,58]],[2,1,4,5,6,7,8,9,10,11],10,[[2],[4],[0],[92],[90],[88],[84],[80],[6],[4],[2],[0]]];
result:=simplex([[2,9,40],[11,-8,82],[3,13,0]],lpmax,[1,2]);
RETURN sum(abs(expected - result)) == 0;
END;

//6.3 2c
test12():=
BEGIN
LOCAL expected,result;
expected:=[33,[[1,-1,0,1,0,0,12],[0,0,1,0,0,1,9],[0,2,0,0,1,-3,1],[0,2,0,2,0,1,33]],[1,3,5],3,[[12],[0],[9],[0],[1],[0]]];
result:=simplex([[1,-1,0,12],[0,2,3,28],[2,-4,1,0]],lpmax,[1,2,3]);
RETURN sum(abs(expected - result)) == 0;
END;

//6.3 2d
test13():=
BEGIN
LOCAL expected,result;
expected:=[28,[[1,0,0,0,-3,1,2,14],[0,0,1,0,2,0,-1,8],[0,1,0,0,-3,0,2,2],[0,0,0,1,-2,0,1,1],[0,0,0,0,8,2,-5,28]],[1,3,2,4],4,[[14],[2],[8],[1],[0],[0],[0]]];
result:=simplex([[1,-1,0,12],[0,2,3,28],[2,-4,1,0]],2,[1,2,3]);
RETURN sum(abs(expected - result)) == 0;
END;

// -slack variables
//      2x +4y ≥ 22
//      3x +2y ≥ 20
//      4x +5y ≥ 40
// min  6x +5y = z
//       x,  y ≥ 0 and integer
test14():=
BEGIN
LOCAL expected,result;
expected:=[47,[[0,0,1,2,0,-4,10],[1,0,0,-1,0,1,2],[0,1,0,1,0,-3/2,7],[0,0,0,1,1,-7/2,3],[0,0,0,1,0,3/2,-47]],[3,1,2,5],3,[[2],[7],[10],[0],[3],[0]]];
result:=simplex([-[2,4,22],-[3,2,20],-[4,5,40],[6,5,0]],lpmin,[1,2]);
RETURN sum(abs(expected - result)) == 0;
END;

// https://www.youtube.com/watch?v=q3gy3bKc1aA&list=PLD3fYc0bAjC_iCOOsHZkxosZFDbcA7Kwf&index=11
test15():=
BEGIN
LOCAL expected,result;
expected:=[53,[[1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0,0,0,0,0,-37/8,13/8,-3/4,0,0,-15/8,41/8,49/4],[0,0,0,0,0,0,0,1,0,0,0,0,-2,-3,-1,0,0,-2,1,13],[0,0,0,0,0,0,0,0,1,0,0,0,43/8,-59/8,5/4,0,0,-15/8,-55/8,69/4],[0,0,0,0,0,1,0,0,0,0,0,0,-11/8,11/8,3/4,0,0,-9/8,7/8,3/4],[0,0,0,1,0,0,0,0,0,0,0,0,-1,0,-1,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,1,3/8,-11/8,1/4,0,0,1/8,-7/8,1/4],[0,0,0,0,0,0,0,0,0,0,1,0,-3/8,11/8,3/4,0,0,-1/8,7/8,3/4],[0,0,0,0,1,0,0,0,0,0,0,0,11/8,-11/8,1/4,0,0,1/8,-15/8,1/4],[0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,-1,1],[0,0,0,0,0,0,0,0,0,0,0,0,-11/8,11/8,-1/4,0,1,-1/8,15/8,3/4],[0,0,0,0,0,0,0,0,0,1,0,0,1,-1,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,3/2,3/2,0,0,0,3/2,5/2,53]],[1,7,8,9,6,4,12,11,5,3,16,17,10,2],10,[[1],[1],[0],[1],[0],[0],[13],[14],[16],[0],[0],[0],[0],[0],[1],[0],[1],[0],[0]]];
result:=simplex([[5,11,13,16,9,32],[7,19,20,23,15,62],[9,25,26,29,16,77],[9,28,30,35,15,88],[-1,1,0,0,0,0],[0,0,0,1,1,1],[0,0,-1,-1,-1,-1],[10,18,22,25,12,0]],lpmax,[],[1,2,3,4,5]);
RETURN sum(abs(expected - result)) == 0;
END;

// Example 9.6.1
test16():=
BEGIN
LOCAL expected,result;
expected:=[0,[[1/4],[1/2],[1/4]],[[1/4],[1/2],[1/4]]];
result:=solveGame([[0,1,-2],[-1,0,1],[2,-1,0]]);
RETURN sum(abs(expected - result)) == 0;
END;

// Appendix B: An example of cycling
test17():=
BEGIN
LOCAL expected,result;
expected:=[-5/4,[[0,0,1,0,0,1,0,0,0,1,1],[1,-1/2,3/4,0,-2,0,15/2,1,-1/2,3/4,3/4],[0,2,1,1,-24,0,6,0,2,1,1],[0,3/2,5/4,0,2,0,21/2,0,3/2,5/4,5/4]],[6,8,4],12,[[3/4],[0],[0],[1],[0],[1],[0],[0],[0],[0]]];
result:=simplex([[1,0,0,1/4,-8,-1,9,0],[0,1,0,1/2,-12,-1/2,3,0],[0,0,1,0,0,1,0,1],[0,0,0,-3/4,20,-1/2,6,0]]);
RETURN sum(abs(expected - result)) == 0;
END;
#end