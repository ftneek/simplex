//Author: @ftneek
//Last Edit: 2024/11/30
//TODO: add shortcuts for mx2 and 2xn games
//TODO: look to optimize pureCheck()
//TODO: look to optimize dominance()
//TODO: 2-person non-zero sum games

#cas
// accepts payoff matrix p for a 2-person zero sum game
// returns [v,x,y]
// v is value of the game
// a column of (x/y) is a strategy for (P1/P2)
// for a given strategy (x_i/y_i) is the probabilitiy (P1/P2) should play (s_i/t_j)
solveGame(p):=
begin
local (d:=dim(p)),(r:=pureCheck(p)),(l:=-not(istart()));
// step 1: check for pure strategies
if dim(r[2+l])!=1 then return r end;

// no pure strategy
// step 2: find mixed strategies

// use 2x2 shortcut if possible
if d==[2,2] then return twobytwo(p) end;

// if not, try to reduce to 2x2 using dominant strategies
p:=dominance(p);
if dim(p[1+l])==[2,2] then
 // use 2x2 if reduced to 2x2
 d:=twobytwo(p[1]);
 // insert 0 for deleted rows and columns
 d[2+l..3+l]:=insertZeros(col(d[2+l],1),col(d[3+l],1),p[2+l],p[3+l]);
 d[2+l]:=transpose(d[2+l]);
 d[3+l]:=transpose(d[3+l]);
 return d;
end;

//TODO: use mx2 method if possible
//TODO: use 2xn method if possible

// otherwise, solve by simplex
r:=simplex_game(p[1+l]);

// insert 0 for deleted rows and columns
if len(p[2+l])>0 or len(p[3+l])>0 then
 r[2+l..3+l]:=insertZeros(col(r[2+l],1),col(r[3+l],1),p[2+l],p[3+l]);
 r[2+l]:=transpose(r[2+l]);
 r[3+l]:=transpose(r[3+l]);
end;

return r;
end:;

// solves 2 person zero sum game by simplex algorithm
// assumes no pure strategy, no more reduction by dominance
// returns [v,x,y]
// v is value of the game
// (x_i/y_j) the is probabilitiy (P1/P2) should play (s_i/t_j)
simplex_game(p):=
begin
local (d:=dim(p)),(alpha:=abs(min(min(p)))),(l:=-not(istart())),v,x,y;

//set up dual y' system
if alpha then p:=p.+alpha end;
p:=concat(p,identity(d[1+l]));
p:=append(p,[op(concat(makelist(-1,1,d[2+l]),makelist(0,1,d[1+l])))]);
p:=addcol1(p,concat(makelist(1,1,d[1+l]),0),d[2+l]+d[1+l]+1+l);

p:=simplex(p);
v:=1/-p[1+l];
y:=redim(p[0+l],d[2+l]);
x:=p[2+l][0+l][d[2+l]+1+l..d[2+l]+d[1+l]+l];
y*=v;
x*=v;
if alpha then v-=alpha end;
return [v,transpose(x),transpose(y)];
end:;

// returns [v,x,y] for pure strategies
// returns [u1,u2] for no pure strategy
// v is value of the game
// a column of (x/y) is a pure strategy for (P1/P2)
// if dim(x)!=1 then PURE STRATEGY
// ex x:=transpose([[1,0,0],
//                  [0,1,0]);
//    y:=transpose([0,0,0,1]);
// means pure strategies @ (s1,t4) and (s2,t4)
pureCheck(p):=
begin
local (d:=dim(p)),maxMinRow,minMaxCol,(u:=[1,-1]),I,J,K,(saddle:=[]),(x:=[]),(y:=[]),(l:=-not(istart()));
if d==1 then
 p:=[p];
 d:=[1,1];
end;
maxMinRow:=col(p,0+l);
minMaxCol:=p[1+l];
for I from 1 to d[1+l] do maxMinRow[I+l]:=min(p[I+l]) end;
u[1+l]:=max(maxMinRow);

for I from 1 to d[2+l] do minMaxCol[I+l]:=max(col(p,I+l)) end;
u[2+l]:=min(minMaxCol);

if u[1+l]==u[2+l] then
 for I from contains(maxMinRow,u[1+l]) to d[1+l] do
  for J from contains(minMaxCol,u[2+l]) to d[2+l] do
   if maxMinRow[I+l]==minMaxCol[J+l] then
    if len(saddle)==0 then saddle:=[I,J];
    else if len(saddle)==2 and len(saddle[1+l])==1 then saddle:=append([saddle],[I,J]) else saddle:=append(saddle,[I,J]) end;
    end;
   end;
  end;
 end;
 if dim(dim(saddle))!=2 then saddle:=[saddle] end;
 K:=col(saddle,1);
 for I from 1 to len(K) do
  J:=[op(makelist(0,1,d[1+l]))];
  J[K[I+l]+l]:=1;
  if not(contains(x,J)) then x:=append(x,J) end;
 end;

 K:=col(saddle,2+l);
 for I from 1 to len(K) do
  J:=[op(makelist(0,1,d[2+l]))];
  J[K[I+l]+l]:=1;
  if not(contains(y,J)) then y:=append(y,J) end;
 end;

// [value of the game, Pure strategy @ saddle points]
 return [u[1+l],transpose(x),transpose(y)];
end:;

// No pure strategy
return [u[1+l],u[2+l]];
end:;

twobytwo(p):=
begin
local a,b,c,(d:=dim(p)),(l:=-not(istart())),r,v;
if d==[2,2] then
 a:=p[1+l,1+l];
 b:=p[1+l,2+l];
 c:=p[2+l,1+l];
 d:=p[2+l,2+l];
 r:=a+d-b-c;
 v:=(a*d-b*c)/r;
 return [v,transpose([(d-c)/r,(a-b)/r]),transpose([(d-b)/r,(a-c)/r])];
end;
return [];
end:;

//helper for dominance
checkRow(row1,row2):=
begin
local (n:=len(row1)),I,(l:=-not(istart()));
for I from 1 to n do if row2[I+l]<row1[I+l] then return 0 end end;
return 1;
end:;

// uses dominant strategies to reduce a payoff matrix to dim [2,2]
// returns list of [m', [indices of deleted rows], [indices of deleted columns]]
dominance(p):=
begin
local (a:=1),(d:=dim(p)),(drow:=[]),(dcol:=[]),I,J,(l:=-not(istart()));

while p != a and d!=[2,2] do
 a:=p;
 for I from 1 to d[1+l] do
  for J from 1 to d[1+l] do
   if I!=J and checkRow(p[I+l],p[J+l])>0 then
    p:=delrows(p,I+l);
    if len(drow)>0 then drow:=append(drow,I+len(drow)) else drow:=append(drow,I) end;
    d[1+l]-=1;
    I-=1;
    break;
    end;
  end;
 end;

 for I from 1 to d[2+l] do
  for J from 1 to d[2+l] do
   if I!=J and checkRow(col(p,J+l),col(p,I+l))>0 then
    p:=delcols(p,I+l);
    if len(dcol)>0 then dcol:=append(dcol,I+len(dcol)) else dcol:=append(dcol,I) end;
    d[2+l]-=1;
    I-=1;
    break;
    end;
  end;
 end;

end;
return [p,drow,dcol];
end:;

// inserts zeros into x for deleted rows and into y for deleted columns
// returns [x',y']
insertZeros(x,y,drow,dcol):=
begin
local (l:=-not(istart())),(I:=0);
for I from 1 to len(drow) do
  if drow[I+l] < len(x) then x:=prepend(x,0); continue; end;
  if drow[I+l] > len(x) then x:=append(x,0); continue; end;
  x:=concat(x[1+l..drow[I+l]-1+l],0,x[drow[I+l]+l..len(x)+l]);
end;

for I from 1 to len(dcol) do
  if dcol[I+l] < len(y) then y:=prepend(y,0); continue; end;
  if dcol[I+l] > len(y) then y:=append(y,0); continue; end;
  y:=concat(y[1+l..dcol[I+l]-1+l],0,y[dcol[I+l]+l..len(y)+l]);
end;

return [x,y];
end:;

// accepts payoff matrix and probabilities X0,Y0
// (X0/Y0) may be empty list or matrix of (X/Y)
// a column of (X/Y) is a potential strategy
// returns bounds for [v1,v2] for given (X_i/Y_i)
verifySecurityLevels(m,x,y):=
begin
local d,(d1:=dim(m)),(n:=[]),(v:=[-1,1]),(l:=-not(istart())),(I:=0);

if x!=[] then
 d:=dim(x);
 if dim(d)!=2 then
  x:=transpose(x);
  d:=[d,1];
 end;
 if d[1+l]<d1[1+l] then
  x:=transpose(x);
  d:=[d[2+l],d[1+l]];
 end;
 for I from 1 to d[2+l] do n:=append(n,min(col(x,I+l)*m)) end;
else v[1+l]:=0 end;

if v[1+l] then v[1+l]:=max(n) else v[1+l]:=[] end;

n:=[];
if y!=[] then
 d:=dim(y);
 if dim(d)!=2 then
  y:=transpose(y);
  d:=[d,1];
 end;
 if d[1+l]<d1[2+l] then
  y:=transpose(y);
  d:=[d[2+l],d[1+l]];
 end;
 for I from 1 to d[2+l] do n:=append(n,max(m*col(y,I+l))) end;
else v[2+l]:=0 end;

if v[2+l] then v[2+l]:=min(n) else v[2+l]:=[] end;

return [v[1+l],v[2+l]];
end:;
#end