//Author: @ftneek
//Last Edit: 2023/12/21
//TODO: add shortcuts for mx2 and 2xn games
//TODO: look to optimize pureCheck()
//TODO: look to optimize dominance()
//TODO: 2-person non-zero sum games

#cas

// accepts payoff matrix p for a 2-person zero sum game
// returns [v,x,y]
// v is value of the game
// a column of (x/y) is a strategy for (P1/P2)
// for a given strategy (x_i/y_i) is the probabilitiy (P1/P2) should play (s_i/t_j)
solveGame(p):=
begin
local (d:=dim(p)),(r:=pureCheck(p));
// step 1: check for pure strategies
if dim(r[2])!=1 then
 return r;
end;

// no pure strategy
// step 2: find mixed strategies

// use 2x2 shortcut if possible
if d==[2,2] then
 return twobytwo(p);
end;

// if not, try to reduce to 2x2 using dominant strategies
p:=dominance(p);
if dim(p[1])==[2,2] then
 // use 2x2 if reduced to 2x2
 d:=twobytwo(p[1]);
 // insert 0 for deleted rows and columns
 d[2..3]:=insertZeros(col(d[2],1),col(d[3],1),p[2],p[3]);
 d[2]:=transpose(d[2]);
 d[3]:=transpose(d[3]);
 return d;
end;

//TODO: use mx2 method if possible
//TODO: use 2xn method if possible

// otherwise, solve by simplex
r:=simplex_game(p[1]);

// insert 0 for deleted rows and columns
if len(p[2])>0 or len(p[3])>0 then
 r[2..3]:=insertZeros(col(r[2],1),col(r[3],1),p[2],p[3]);
 r[2]:=transpose(r[2]);
 r[3]:=transpose(r[3]);
end;

return r;

end;

// solves 2 person zero sum game by simplex algorithm
// assumes no pure strategy, no more reduction by dominance
// returns [v,x,y]
// v is value of the game
// (x_i/y_j) the is probabilitiy (P1/P2) should play (s_i/t_j)
simplex_game(p):=
begin
local (d:=dim(p)),(alpha:=ABS(min(min(p)))),v,x,y;

//set up dual y' system
if alpha then p:=p.+alpha end;
p:=concat(p,identity(d[1]));
p:=append(p,[op(concat(makelist(-1,X,1,d[2]),makelist(0,X,1,d[1])))]);
p:=ADDCOL(p,concat(makelist(1,X,1,d[1]),0),d[2]+d[1]+1);

p:=simplex(p);
v:=1/-p[1];
y:=redim(p[0],d[2]);
x:=p[2][0][d[2]+1..d[2]+d[1]];

y*=v;
x*=v;
if alpha then v-=alpha end;
return [v,transpose(x),transpose(y)];

end;

// returns [v,x,y] for pure strategies
// returns [u1,u2] for no pure strategy
// v is value of the game
// a column of (x/y) is a pure strategy for (P1/P2)
// if dim(x)!=1 then PURE STRATEGY
// ex x:=transpose([[1,0,0],
//            [0,1,0]);
//    y:=transpose([0,0,0,1]);
// means pure strategies @ (s1,t4) and (s2,t4)
pureCheck(a)
begin
local (d:=dim(a)),maxMinRow,minMaxCol,(u:=[1,-1]),J,K,(saddle:=[]),(x:=[]),(y:=[]);
if d==1 then
 a:=[a];
 d:=[1,1];
end;
maxMinRow:=col(a,0);
minMaxCol:=a[1];
for I from 1 to d[1] do
maxMinRow[I]:=min(a[I]);
end;
u[1]:=max(maxMinRow);

for I from 1 to d[2] do
minMaxCol[I]:=max(col(a,I));
end;
u[2]:=min(minMaxCol);

if u[1]==u[2] then
 for I from POS(maxMinRow,u[1]) to d[1] do
  for J from POS(minMaxCol,u[2]) to d[2] do
   if maxMinRow[I]==minMaxCol[J] then
    if len(saddle)==0 then
     saddle:=[I,J];
    else
     if len(saddle)==2 AND len(saddle[1])==1 then
      saddle:=append([saddle],[I,J]);
     else
      saddle:=append(saddle,[I,J]);
     end;
    end;
   end;
  end;
 end;
 if dim(dim(saddle))!=2 then
  saddle:=[saddle];
 end;
 K:=col(saddle,1);
 for I from 1 to len(K) do
  J:=[op(makelist(0,X,1,d[1]))];
  J[K[I]]:=1;
  if not contains(x,J) then
   x:=append(x,J);
  end;
 end;

 K:=col(saddle,2);
 for I from 1 to len(K) do
  J:=[op(makelist(0,X,1,d[2]))];
  J[K[I]]:=1;
  if not contains(y,J) then
   y:=append(y,J);
  end;
 end;

// [value of the game, Pure strategy @ saddle points]
 return [u[1],transpose(x),transpose(y)]
end;

// No pure strategy
return [u[1],u[2]];
end;

twobytwo(m):=
begin
local a,b,c,(d:=dim(m)),r,v,(l:=[]);
if d==[2,2] then
 a:=m[1][1];
 b:=m[1][2];
 c:=m[2][1];
 d:=m[2][2];
 r:=a+d-b-c;
 v:=(a*d-b*c)/r;
 l:=[v,transpose([(d-c)/r,(a-b)/r]),transpose([(d-b)/r,(a-c)/r])];
end;
return l;
end;

//helper for dominance
checkRow(row1,row2):=
begin
local (n:=len(row1)),I;
for I from 1 to n do
 if row2[I]<row1[I] then return 0 end;
end;
return 1;
end;

// uses dominant strategies to reduce a payoff matrix to dim [2,2]
// returns list of [m', [indices of deleted rows], [indices of deleted columns]]
dominance(m):=
begin
local (a:=1),(d:=dim(m)),(drow:=[]),(dcol:=[]),I,J;

WHILE m!=a AND d!=[2,2] do
 a:=m;
 for I from 1 to d[1] do
  for J from 1 to d[1] do
   if I!=J AND checkRow(m[I],m[J])>0 then
    m:=delrow(m,I);
    if len(drow)>0 then
     drow:=append(drow,I+len(drow));
    else
     drow:=append(drow,I);
    end;
    d[1]-=1;
    I-=1;
    BREAK;
    end;
  end;
 end;

 for I from 1 to d[2] do
  for J from 1 to d[2] do
   if I!=J AND checkRow(col(m,J),col(m,I))>0 then
    m:=delcol(m,I);
    if len(dcol)>0 then
     dcol:=append(dcol,I+len(dcol));
    else
     dcol:=append(dcol,I);
    end;
    d[2]-=1;
    I-=1;
    BREAK;
    end;
  end;
 end;

end;
return [m,drow,dcol];
end;

// inserts zeros into x for deleted rows and into y for deleted columns
// returns [x',y']
insertZeros(x,y,drow,dcol):=
begin

for I from 1 to len(drow) do
 CASE
  if drow[I] < len(x) then x:=prepend(x,0) end;
  if drow[I] > len(x) then x:=append(x,0) end;
  DEFAULT x:=concat(x[1..drow[I]-1],0,x[drow[I]..len(x)]);
 end;
end;

for I from 1 to len(dcol) do
 CASE
  if dcol[I] < len(y) then y:=prepend(y,0) end;
  if dcol[I] > len(y) then y:=append(y,0) end;
  DEFAULT y:=concat(y[1..dcol[I]-1],0,y[dcol[I]..len(y)]);
 end;
end;

return [x,y];

end;

// accepts payoff matrix and probabilities X0,Y0
// (X0/Y0) may be empty list or matrix of (X/Y)
// a column of (X/Y) is a potential strategy
// returns bounds for [v1,v2] for given (X_i/Y_i)
verifySecurityLevels(m,x,y):=
begin
local d,(d1:=dim(m)),(n:=[]),(v:=[-1,1]);

if x!=[] then
 d:=dim(x);
 if dim(d)!=2 then
  x:=transpose(x);
  d:=[d,1];
 end;
 if d[1]<d1[1] then
  x:=transpose(x);
  d:=[d[2],d[1]];
 end;
 for I from 1 to d[2] do
  n:=append(n,min(col(x,I)*m));
 end;
else
v[1]:=0;
end;

if v[1] then
 v[1]:=max(n);
else
 v[1]:=[];
end;

n:=[];
if y!=[] then
 d:=dim(y);
 if dim(d)!=2 then
  y:=transpose(y);
  d:=[d,1];
 end;
 if d[1]<d1[2] then
  y:=transpose(y);
  d:=[d[2],d[1]];
 end;
 for I from 1 to d[2] do
  n:=append(n,max(m*col(y,I)));
 end;
else
v[2]:=0;
end;

if v[2] then
 v[2]:=min(n);
else
 v[2]:=[];
end;

return [v[1],v[2]];
end;

#end